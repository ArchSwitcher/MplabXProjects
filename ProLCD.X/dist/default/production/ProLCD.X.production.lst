

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug  9 19:56:03 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 2.05
    23                           ; Generated 20/12/2018 GMT
    24                           ; 
    25                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _LATA	set	3977
    57  0000                     _TRISD	set	3989
    58  0000                     _TRISA	set	3986
    59  0000                     _PORTDbits	set	3971
    60                           
    61                           	psect	smallconst
    62  000800                     __psmallconst:
    63                           	opt callstack 0
    64  000800  00                 	db	0
    65  000801                     STR_7:
    66  000801  54                 	db	84	;'T'
    67  000802  45                 	db	69	;'E'
    68  000803  4C                 	db	76	;'L'
    69  000804  46                 	db	70	;'F'
    70  000805  2E                 	db	46
    71  000806  3A                 	db	58	;':'
    72  000807  37                 	db	55	;'7'
    73  000808  37                 	db	55	;'7'
    74  000809  37                 	db	55	;'7'
    75  00080A  32                 	db	50	;'2'
    76  00080B  30                 	db	48	;'0'
    77  00080C  33                 	db	51	;'3'
    78  00080D  35                 	db	53	;'5'
    79  00080E  31                 	db	49	;'1'
    80  00080F  00                 	db	0
    81  000810                     STR_2:
    82  000810  50                 	db	80	;'P'
    83  000811  41                 	db	65	;'A'
    84  000812  42                 	db	66	;'B'
    85  000813  4C                 	db	76	;'L'
    86  000814  4F                 	db	79	;'O'
    87  000815  5F                 	db	95	;'_'
    88  000816  5A                 	db	90	;'Z'
    89  000817  41                 	db	65	;'A'
    90  000818  50                 	db	80	;'P'
    91  000819  45                 	db	69	;'E'
    92  00081A  54                 	db	84	;'T'
    93  00081B  41                 	db	65	;'A'
    94  00081C  00                 	db	0
    95  00081D                     STR_1:
    96  00081D  43                 	db	67	;'C'
    97  00081E  75                 	db	117	;'u'
    98  00081F  72                 	db	114	;'r'
    99  000820  73                 	db	115	;'s'
   100  000821  6F                 	db	111	;'o'
   101  000822  20                 	db	32
   102  000823  50                 	db	80	;'P'
   103  000824  49                 	db	73	;'I'
   104  000825  43                 	db	67	;'C'
   105  000826  31                 	db	49	;'1'
   106  000827  38                 	db	56	;'8'
   107  000828  46                 	db	70	;'F'
   108  000829  00                 	db	0
   109  00082A                     STR_5:
   110  00082A  50                 	db	80	;'P'
   111  00082B  41                 	db	65	;'A'
   112  00082C  62                 	db	98	;'b'
   113  00082D  6C                 	db	108	;'l'
   114  00082E  6F                 	db	111	;'o'
   115  00082F  20                 	db	32
   116  000830  5A                 	db	90	;'Z'
   117  000831  61                 	db	97	;'a'
   118  000832  70                 	db	112	;'p'
   119  000833  65                 	db	101	;'e'
   120  000834  74                 	db	116	;'t'
   121  000835  61                 	db	97	;'a'
   122  000836  00                 	db	0
   123  000837                     STR_6:
   124  000837  40                 	db	64	;'@'
   125  000838  47                 	db	71	;'G'
   126  000839  4D                 	db	77	;'M'
   127  00083A  41                 	db	65	;'A'
   128  00083B  49                 	db	73	;'I'
   129  00083C  4C                 	db	76	;'L'
   130  00083D  2E                 	db	46
   131  00083E  43                 	db	67	;'C'
   132  00083F  4F                 	db	79	;'O'
   133  000840  4D                 	db	77	;'M'
   134  000841  00                 	db	0
   135  000842                     STR_4:
   136  000842  4D                 	db	77	;'M'
   137  000843  55                 	db	85	;'U'
   138  000844  4E                 	db	78	;'N'
   139  000845  44                 	db	68	;'D'
   140  000846  4F                 	db	79	;'O'
   141  000847  00                 	db	0
   142  000848                     STR_3:
   143  000848  48                 	db	72	;'H'
   144  000849  4F                 	db	79	;'O'
   145  00084A  4C                 	db	76	;'L'
   146  00084B  41                 	db	65	;'A'
   147  00084C  00                 	db	0
   148                           
   149                           ; #config settings
   150  00084D  00                 	db	0	; dummy byte at the end
   151  0000                     
   152                           	psect	cinit
   153  000BBA                     __pcinit:
   154                           	opt callstack 0
   155  000BBA                     start_initialization:
   156                           	opt callstack 0
   157  000BBA                     __initialization:
   158                           	opt callstack 0
   159  000BBA                     end_of_initialization:
   160                           	opt callstack 0
   161  000BBA                     __end_of__initialization:
   162                           	opt callstack 0
   163  000BBA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   164  000BBC  6EF8               	movwf	tblptru,c
   165  000BBE  0E08               	movlw	high __Lsmallconst
   166  000BC0  6EF7               	movwf	tblptrh,c
   167  000BC2  0100               	movlb	0
   168  000BC4  EF27  F004         	goto	_main	;jump to C main() function
   169                           
   170                           	psect	cstackCOMRAM
   171  000001                     __pcstackCOMRAM:
   172                           	opt callstack 0
   173  000001                     Lcd_Port@a:
   174                           	opt callstack 0
   175  000001                     MsDelay@itime:
   176                           	opt callstack 0
   177                           
   178                           ; 2 bytes @ 0x0
   179  000001                     	ds	1
   180  000002                     ??_Lcd_Cmd:
   181  000002                     Lcd_Write_Char@temp:
   182                           	opt callstack 0
   183                           
   184                           ; 1 bytes @ 0x1
   185  000002                     	ds	1
   186  000003                     Lcd_Cmd@a:
   187                           	opt callstack 0
   188  000003                     Lcd_Write_Char@y:
   189                           	opt callstack 0
   190  000003                     MsDelay@i:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x2
   194  000003                     	ds	1
   195  000004                     ??_Lcd_Init:
   196  000004                     Lcd_Set_Cursor@b:
   197                           	opt callstack 0
   198  000004                     Lcd_Write_Char@a:
   199                           	opt callstack 0
   200                           
   201                           ; 1 bytes @ 0x3
   202  000004                     	ds	1
   203  000005                     Lcd_Set_Cursor@a:
   204                           	opt callstack 0
   205  000005                     Lcd_Write_String@a:
   206                           	opt callstack 0
   207  000005                     MsDelay@j:
   208                           	opt callstack 0
   209                           
   210                           ; 2 bytes @ 0x4
   211  000005                     	ds	1
   212  000006                     Lcd_Set_Cursor@z:
   213                           	opt callstack 0
   214                           
   215                           ; 1 bytes @ 0x5
   216  000006                     	ds	1
   217  000007                     ??_Lcd_Write_String:
   218  000007                     Lcd_Set_Cursor@y:
   219                           	opt callstack 0
   220                           
   221                           ; 1 bytes @ 0x6
   222  000007                     	ds	1
   223  000008                     Lcd_Set_Cursor@temp:
   224                           	opt callstack 0
   225                           
   226                           ; 1 bytes @ 0x7
   227  000008                     	ds	1
   228  000009                     Lcd_Write_String@i:
   229                           	opt callstack 0
   230                           
   231                           ; 2 bytes @ 0x8
   232  000009                     	ds	2
   233  00000B                     ??_main:
   234                           
   235                           ; 1 bytes @ 0xA
   236  00000B                     	ds	2
   237  00000D                     main@b:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0xC
   241  00000D                     	ds	2
   242  00000F                     main@a:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0xE
   246  00000F                     	ds	2
   247                           
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 16 in file "main.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;  a               2   14[COMRAM] unsigned int 
   258 ;;  b               2   12[COMRAM] int 
   259 ;; Return value:  Size  Location     Type
   260 ;;                  1    wreg      void 
   261 ;; Registers used:
   262 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   263 ;; Tracked objects:
   264 ;;		On entry : 0/0
   265 ;;		On exit  : 0/0
   266 ;;		Unchanged: 0/0
   267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   268 ;;      Params:         0       0       0       0       0       0       0       0       0
   269 ;;      Locals:         4       0       0       0       0       0       0       0       0
   270 ;;      Temps:          2       0       0       0       0       0       0       0       0
   271 ;;      Totals:         6       0       0       0       0       0       0       0       0
   272 ;;Total ram usage:        6 bytes
   273 ;; Hardware stack levels required when called:    3
   274 ;; This function calls:
   275 ;;		_Lcd_Clear
   276 ;;		_Lcd_Init
   277 ;;		_Lcd_Set_Cursor
   278 ;;		_Lcd_Shift_Left
   279 ;;		_Lcd_Shift_Right
   280 ;;		_Lcd_Write_Char
   281 ;;		_Lcd_Write_String
   282 ;;		_MsDelay
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           	psect	text0
   289  00084E                     __ptext0:
   290                           	opt callstack 0
   291  00084E                     _main:
   292                           	opt callstack 28
   293                           
   294                           ;main.c: 18:     TRISA=0x00;
   295                           
   296                           ;incstack = 0
   297  00084E  0E00               	movlw	0
   298  000850  6E92               	movwf	3986,c	;volatile
   299                           
   300                           ;main.c: 20:   unsigned int a;;main.c: 21:   int b;;main.c: 22:   TRISD = 0x00;
   301  000852  0E00               	movlw	0
   302  000854  6E95               	movwf	3989,c	;volatile
   303                           
   304                           ;main.c: 23:   Lcd_Init();
   305  000856  ECFB  F004         	call	_Lcd_Init	;wreg free
   306                           
   307                           ;main.c: 27:   for(b=0;b<4;b++){
   308  00085A  0E00               	movlw	0
   309  00085C  6E0E               	movwf	main@b+1,c
   310  00085E  0E00               	movlw	0
   311  000860  6E0D               	movwf	main@b,c
   312  000862                     l1009:
   313  000862  BE0E               	btfsc	main@b+1,7,c
   314  000864  D006               	goto	l1013
   315  000866  500E               	movf	main@b+1,w,c
   316  000868  E11F               	bnz	l1019
   317  00086A  0E04               	movlw	4
   318  00086C  5C0D               	subwf	main@b,w,c
   319  00086E  B0D8               	btfsc	status,0,c
   320  000870  D01B               	goto	l1019
   321  000872                     l1013:
   322                           
   323                           ;main.c: 28:       LATA=0x01<<b;
   324  000872  C00D  F00B         	movff	main@b,??_main
   325  000876  0E01               	movlw	1
   326  000878  6E0C               	movwf	(??_main+1)& (0+255),c
   327  00087A  2A0B               	incf	??_main,f,c
   328  00087C  D002               	goto	u204
   329  00087E                     u205:
   330  00087E  90D8               	bcf	status,0,c
   331  000880  360C               	rlcf	??_main+1,f,c
   332  000882                     u204:
   333  000882  2E0B               	decfsz	??_main,f,c
   334  000884  D7FC               	goto	u205
   335  000886  500C               	movf	??_main+1,w,c
   336  000888  6E89               	movwf	3977,c	;volatile
   337                           
   338                           ;main.c: 29:       _delay((unsigned long)((700)*(4000000/4000.0)));
   339  00088A  0E04               	movlw	4
   340  00088C  6E0C               	movwf	(??_main+1)& (0+255),c
   341  00088E  0E8E               	movlw	142
   342  000890  6E0B               	movwf	??_main& (0+255),c
   343  000892  0E12               	movlw	18
   344  000894                     u237:
   345  000894  2EE8               	decfsz	wreg,f,c
   346  000896  D7FE               	bra	u237
   347  000898  2E0B               	decfsz	??_main& (0+255),f,c
   348  00089A  D7FC               	bra	u237
   349  00089C  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   350  00089E  D7FA               	bra	u237
   351  0008A0  D000               	nop2	
   352                           
   353                           ;main.c: 30:   }
   354  0008A2  4A0D               	infsnz	main@b,f,c
   355  0008A4  2A0E               	incf	main@b+1,f,c
   356  0008A6  D7DD               	goto	l1009
   357  0008A8                     l1019:
   358                           
   359                           ;main.c: 33:   {;main.c: 34:     Lcd_Clear();
   360  0008A8  ECF2  F005         	call	_Lcd_Clear	;wreg free
   361                           
   362                           ;main.c: 35:     Lcd_Set_Cursor(1,1);
   363  0008AC  0E01               	movlw	1
   364  0008AE  6E04               	movwf	Lcd_Set_Cursor@b,c
   365  0008B0  0E01               	movlw	1
   366  0008B2  EC34  F005         	call	_Lcd_Set_Cursor
   367                           
   368                           ;main.c: 36:     Lcd_Write_String("Curso PIC18F");
   369  0008B6  0E1D               	movlw	low STR_1
   370  0008B8  6E05               	movwf	Lcd_Write_String@a,c
   371  0008BA  0E08               	movlw	high STR_1
   372  0008BC  6E06               	movwf	Lcd_Write_String@a+1,c
   373  0008BE  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   374                           
   375                           ;main.c: 37:     Lcd_Set_Cursor(2,1);
   376  0008C2  0E01               	movlw	1
   377  0008C4  6E04               	movwf	Lcd_Set_Cursor@b,c
   378  0008C6  0E02               	movlw	2
   379  0008C8  EC34  F005         	call	_Lcd_Set_Cursor
   380                           
   381                           ;main.c: 38:     Lcd_Write_String("PABLO_ZAPETA");
   382  0008CC  0E10               	movlw	low STR_2
   383  0008CE  6E05               	movwf	Lcd_Write_String@a,c
   384  0008D0  0E08               	movlw	high STR_2
   385  0008D2  6E06               	movwf	Lcd_Write_String@a+1,c
   386  0008D4  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   387                           
   388                           ;main.c: 39:     MsDelay(2000);
   389  0008D8  0E07               	movlw	7
   390  0008DA  6E02               	movwf	MsDelay@itime+1,c
   391  0008DC  0ED0               	movlw	208
   392  0008DE  6E01               	movwf	MsDelay@itime,c
   393  0008E0  EC9D  F005         	call	_MsDelay	;wreg free
   394                           
   395                           ;main.c: 40:     Lcd_Clear();
   396  0008E4  ECF2  F005         	call	_Lcd_Clear	;wreg free
   397                           
   398                           ;main.c: 41:     Lcd_Set_Cursor(1,1);
   399  0008E8  0E01               	movlw	1
   400  0008EA  6E04               	movwf	Lcd_Set_Cursor@b,c
   401  0008EC  0E01               	movlw	1
   402  0008EE  EC34  F005         	call	_Lcd_Set_Cursor
   403                           
   404                           ;main.c: 42:     Lcd_Write_String("HOLA");
   405  0008F2  0E48               	movlw	low STR_3
   406  0008F4  6E05               	movwf	Lcd_Write_String@a,c
   407  0008F6  0E08               	movlw	high STR_3
   408  0008F8  6E06               	movwf	Lcd_Write_String@a+1,c
   409  0008FA  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   410                           
   411                           ;main.c: 43:     Lcd_Set_Cursor(2,1);
   412  0008FE  0E01               	movlw	1
   413  000900  6E04               	movwf	Lcd_Set_Cursor@b,c
   414  000902  0E02               	movlw	2
   415  000904  EC34  F005         	call	_Lcd_Set_Cursor
   416                           
   417                           ;main.c: 44:     Lcd_Write_String("MUNDO");
   418  000908  0E42               	movlw	low STR_4
   419  00090A  6E05               	movwf	Lcd_Write_String@a,c
   420  00090C  0E08               	movlw	high STR_4
   421  00090E  6E06               	movwf	Lcd_Write_String@a+1,c
   422  000910  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   423                           
   424                           ;main.c: 45:     MsDelay(2000);
   425  000914  0E07               	movlw	7
   426  000916  6E02               	movwf	MsDelay@itime+1,c
   427  000918  0ED0               	movlw	208
   428  00091A  6E01               	movwf	MsDelay@itime,c
   429  00091C  EC9D  F005         	call	_MsDelay	;wreg free
   430                           
   431                           ;main.c: 46:     Lcd_Clear();
   432  000920  ECF2  F005         	call	_Lcd_Clear	;wreg free
   433                           
   434                           ;main.c: 47:     Lcd_Set_Cursor(1,1);
   435  000924  0E01               	movlw	1
   436  000926  6E04               	movwf	Lcd_Set_Cursor@b,c
   437  000928  0E01               	movlw	1
   438  00092A  EC34  F005         	call	_Lcd_Set_Cursor
   439                           
   440                           ;main.c: 48:     Lcd_Write_String("PAblo Zapeta");
   441  00092E  0E2A               	movlw	low STR_5
   442  000930  6E05               	movwf	Lcd_Write_String@a,c
   443  000932  0E08               	movlw	high STR_5
   444  000934  6E06               	movwf	Lcd_Write_String@a+1,c
   445  000936  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   446                           
   447                           ;main.c: 49:     Lcd_Set_Cursor(2,1);
   448  00093A  0E01               	movlw	1
   449  00093C  6E04               	movwf	Lcd_Set_Cursor@b,c
   450  00093E  0E02               	movlw	2
   451  000940  EC34  F005         	call	_Lcd_Set_Cursor
   452                           
   453                           ;main.c: 50:     Lcd_Write_String("@GMAIL.COM");
   454  000944  0E37               	movlw	low STR_6
   455  000946  6E05               	movwf	Lcd_Write_String@a,c
   456  000948  0E08               	movlw	high STR_6
   457  00094A  6E06               	movwf	Lcd_Write_String@a+1,c
   458  00094C  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   459                           
   460                           ;main.c: 51:     MsDelay(2000);
   461  000950  0E07               	movlw	7
   462  000952  6E02               	movwf	MsDelay@itime+1,c
   463  000954  0ED0               	movlw	208
   464  000956  6E01               	movwf	MsDelay@itime,c
   465  000958  EC9D  F005         	call	_MsDelay	;wreg free
   466                           
   467                           ;main.c: 52:     MsDelay(2000);
   468  00095C  0E07               	movlw	7
   469  00095E  6E02               	movwf	MsDelay@itime+1,c
   470  000960  0ED0               	movlw	208
   471  000962  6E01               	movwf	MsDelay@itime,c
   472  000964  EC9D  F005         	call	_MsDelay	;wreg free
   473                           
   474                           ;main.c: 53:     for(a=0;a<15;a++)
   475  000968  0E00               	movlw	0
   476  00096A  6E10               	movwf	main@a+1,c
   477  00096C  0E00               	movlw	0
   478  00096E  6E0F               	movwf	main@a,c
   479  000970                     l1059:
   480                           
   481                           ;main.c: 54:     {;main.c: 55:         MsDelay(300);
   482  000970  0E01               	movlw	1
   483  000972  6E02               	movwf	MsDelay@itime+1,c
   484  000974  0E2C               	movlw	44
   485  000976  6E01               	movwf	MsDelay@itime,c
   486  000978  EC9D  F005         	call	_MsDelay	;wreg free
   487                           
   488                           ;main.c: 56:         Lcd_Shift_Left();
   489  00097C  ECEB  F005         	call	_Lcd_Shift_Left	;wreg free
   490                           
   491                           ;main.c: 57:     }
   492  000980  4A0F               	infsnz	main@a,f,c
   493  000982  2A10               	incf	main@a+1,f,c
   494  000984  5010               	movf	main@a+1,w,c
   495  000986  E104               	bnz	u210
   496  000988  0E0F               	movlw	15
   497  00098A  5C0F               	subwf	main@a,w,c
   498  00098C  A0D8               	btfss	status,0,c
   499  00098E  D7F0               	goto	l1059
   500  000990                     u210:
   501                           
   502                           ;main.c: 59:     for(a=0;a<15;a++)
   503  000990  0E00               	movlw	0
   504  000992  6E10               	movwf	main@a+1,c
   505  000994  0E00               	movlw	0
   506  000996  6E0F               	movwf	main@a,c
   507  000998                     l1073:
   508                           
   509                           ;main.c: 60:     {;main.c: 61:         MsDelay(300);
   510  000998  0E01               	movlw	1
   511  00099A  6E02               	movwf	MsDelay@itime+1,c
   512  00099C  0E2C               	movlw	44
   513  00099E  6E01               	movwf	MsDelay@itime,c
   514  0009A0  EC9D  F005         	call	_MsDelay	;wreg free
   515                           
   516                           ;main.c: 62:         Lcd_Shift_Right();
   517  0009A4  ECE4  F005         	call	_Lcd_Shift_Right	;wreg free
   518                           
   519                           ;main.c: 63:     }
   520  0009A8  4A0F               	infsnz	main@a,f,c
   521  0009AA  2A10               	incf	main@a+1,f,c
   522  0009AC  5010               	movf	main@a+1,w,c
   523  0009AE  E104               	bnz	u220
   524  0009B0  0E0F               	movlw	15
   525  0009B2  5C0F               	subwf	main@a,w,c
   526  0009B4  A0D8               	btfss	status,0,c
   527  0009B6  D7F0               	goto	l1073
   528  0009B8                     u220:
   529                           
   530                           ;main.c: 64:     Lcd_Clear();
   531  0009B8  ECF2  F005         	call	_Lcd_Clear	;wreg free
   532                           
   533                           ;main.c: 65:     Lcd_Set_Cursor(1,1);
   534  0009BC  0E01               	movlw	1
   535  0009BE  6E04               	movwf	Lcd_Set_Cursor@b,c
   536  0009C0  0E01               	movlw	1
   537  0009C2  EC34  F005         	call	_Lcd_Set_Cursor
   538                           
   539                           ;main.c: 66:     Lcd_Write_String("TELF.:77720351");
   540  0009C6  0E01               	movlw	low STR_7
   541  0009C8  6E05               	movwf	Lcd_Write_String@a,c
   542  0009CA  0E08               	movlw	high STR_7
   543  0009CC  6E06               	movwf	Lcd_Write_String@a+1,c
   544  0009CE  EC5C  F005         	call	_Lcd_Write_String	;wreg free
   545                           
   546                           ;main.c: 67:     Lcd_Set_Cursor(2,1);
   547  0009D2  0E01               	movlw	1
   548  0009D4  6E04               	movwf	Lcd_Set_Cursor@b,c
   549  0009D6  0E02               	movlw	2
   550  0009D8  EC34  F005         	call	_Lcd_Set_Cursor
   551                           
   552                           ;main.c: 68:     Lcd_Write_Char('O');
   553  0009DC  0E4F               	movlw	79
   554  0009DE  EC81  F005         	call	_Lcd_Write_Char
   555                           
   556                           ;main.c: 69:     Lcd_Write_Char('K');
   557  0009E2  0E4B               	movlw	75
   558  0009E4  EC81  F005         	call	_Lcd_Write_Char
   559                           
   560                           ;main.c: 70:     MsDelay(2000);
   561  0009E8  0E07               	movlw	7
   562  0009EA  6E02               	movwf	MsDelay@itime+1,c
   563  0009EC  0ED0               	movlw	208
   564  0009EE  6E01               	movwf	MsDelay@itime,c
   565  0009F0  EC9D  F005         	call	_MsDelay	;wreg free
   566  0009F4  D759               	goto	l1019
   567  0009F6                     __end_of_main:
   568                           	opt callstack 0
   569                           
   570 ;; *************** function _MsDelay *****************
   571 ;; Defined at:
   572 ;;		line 5 in file "delayms.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  itime           2    0[COMRAM] unsigned int 
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  j               2    4[COMRAM] unsigned int 
   577 ;;  i               2    2[COMRAM] unsigned int 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  1    wreg      void 
   580 ;; Registers used:
   581 ;;		wreg, status,2, status,0
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   587 ;;      Params:         2       0       0       0       0       0       0       0       0
   588 ;;      Locals:         4       0       0       0       0       0       0       0       0
   589 ;;      Temps:          0       0       0       0       0       0       0       0       0
   590 ;;      Totals:         6       0       0       0       0       0       0       0       0
   591 ;;Total ram usage:        6 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; This function calls:
   594 ;;		Nothing
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text1
   601  000B3A                     __ptext1:
   602                           	opt callstack 0
   603  000B3A                     _MsDelay:
   604                           	opt callstack 30
   605                           
   606                           ;delayms.c: 6:     unsigned int i;;delayms.c: 7:     unsigned int j;;delayms.c: 8:     f
      +                          or (i = 0; i < itime; i++) {
   607                           
   608                           ;incstack = 0
   609  000B3A  0E00               	movlw	0
   610  000B3C  6E04               	movwf	MsDelay@i+1,c
   611  000B3E  0E00               	movlw	0
   612  000B40  6E03               	movwf	MsDelay@i,c
   613  000B42  D00E               	goto	l1001
   614  000B44                     l989:
   615                           
   616                           ;delayms.c: 9:         for (j = 0; j < 165; j++) {
   617  000B44  0E00               	movlw	0
   618  000B46  6E06               	movwf	MsDelay@j+1,c
   619  000B48  0E00               	movlw	0
   620  000B4A  6E05               	movwf	MsDelay@j,c
   621  000B4C                     l995:
   622                           
   623                           ;delayms.c: 10:         }
   624  000B4C  4A05               	infsnz	MsDelay@j,f,c
   625  000B4E  2A06               	incf	MsDelay@j+1,f,c
   626  000B50  5006               	movf	MsDelay@j+1,w,c
   627  000B52  E104               	bnz	u170
   628  000B54  0EA5               	movlw	165
   629  000B56  5C05               	subwf	MsDelay@j,w,c
   630  000B58  A0D8               	btfss	status,0,c
   631  000B5A  D7F8               	goto	l995
   632  000B5C                     u170:
   633                           
   634                           ;delayms.c: 11:     }
   635  000B5C  4A03               	infsnz	MsDelay@i,f,c
   636  000B5E  2A04               	incf	MsDelay@i+1,f,c
   637  000B60                     l1001:
   638  000B60  5001               	movf	MsDelay@itime,w,c
   639  000B62  5C03               	subwf	MsDelay@i,w,c
   640  000B64  5002               	movf	MsDelay@itime+1,w,c
   641  000B66  5804               	subwfb	MsDelay@i+1,w,c
   642  000B68  B0D8               	btfsc	status,0,c
   643  000B6A  0012               	return	
   644  000B6C  D7EB               	goto	l989
   645  000B6E                     __end_of_MsDelay:
   646                           	opt callstack 0
   647                           
   648 ;; *************** function _Lcd_Write_String *****************
   649 ;; Defined at:
   650 ;;		line 97 in file "./lcd.h"
   651 ;; Parameters:    Size  Location     Type
   652 ;;  a               2    4[COMRAM] PTR unsigned char 
   653 ;;		 -> STR_7(15), STR_6(11), STR_5(13), STR_4(6), 
   654 ;;		 -> STR_3(5), STR_2(13), STR_1(13), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  i               2    8[COMRAM] int 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   666 ;;      Params:         2       0       0       0       0       0       0       0       0
   667 ;;      Locals:         2       0       0       0       0       0       0       0       0
   668 ;;      Temps:          2       0       0       0       0       0       0       0       0
   669 ;;      Totals:         6       0       0       0       0       0       0       0       0
   670 ;;Total ram usage:        6 bytes
   671 ;; Hardware stack levels used:    1
   672 ;; Hardware stack levels required when called:    2
   673 ;; This function calls:
   674 ;;		_Lcd_Write_Char
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text2
   681  000AB8                     __ptext2:
   682                           	opt callstack 0
   683  000AB8                     _Lcd_Write_String:
   684                           	opt callstack 28
   685                           
   686                           ;./lcd.h: 97: void Lcd_Write_String(char *a);./lcd.h: 98: {;./lcd.h: 99:  int i;;./lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
   687                           
   688                           ;incstack = 0
   689  000AB8  0E00               	movlw	0
   690  000ABA  6E0A               	movwf	Lcd_Write_String@i+1,c
   691  000ABC  0E00               	movlw	0
   692  000ABE  6E09               	movwf	Lcd_Write_String@i,c
   693  000AC0  D010               	goto	l985
   694  000AC2                     l981:
   695                           
   696                           ;./lcd.h: 101:     Lcd_Write_Char(a[i]);
   697  000AC2  5009               	movf	Lcd_Write_String@i,w,c
   698  000AC4  2405               	addwf	Lcd_Write_String@a,w,c
   699  000AC6  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   700  000AC8  500A               	movf	Lcd_Write_String@i+1,w,c
   701  000ACA  2006               	addwfc	Lcd_Write_String@a+1,w,c
   702  000ACC  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   703  000ACE  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   704  000AD2  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   705  000AD6                     	if	0	;tblptru may be non-zero
   706  000AD6                     	endif
   707  000AD6                     	if	0	;tblptru may be non-zero
   708  000AD6                     	endif
   709  000AD6  0008               	tblrd		*
   710  000AD8  50F5               	movf	tablat,w,c
   711  000ADA  EC81  F005         	call	_Lcd_Write_Char
   712  000ADE  4A09               	infsnz	Lcd_Write_String@i,f,c
   713  000AE0  2A0A               	incf	Lcd_Write_String@i+1,f,c
   714  000AE2                     l985:
   715  000AE2  5009               	movf	Lcd_Write_String@i,w,c
   716  000AE4  2405               	addwf	Lcd_Write_String@a,w,c
   717  000AE6  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   718  000AE8  500A               	movf	Lcd_Write_String@i+1,w,c
   719  000AEA  2006               	addwfc	Lcd_Write_String@a+1,w,c
   720  000AEC  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   721  000AEE  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   722  000AF2  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   723  000AF6                     	if	0	;tblptru may be non-zero
   724  000AF6                     	endif
   725  000AF6                     	if	0	;tblptru may be non-zero
   726  000AF6                     	endif
   727  000AF6  0008               	tblrd		*
   728  000AF8  50F5               	movf	tablat,w,c
   729  000AFA  0900               	iorlw	0
   730  000AFC  B4D8               	btfsc	status,2,c
   731  000AFE  0012               	return	
   732  000B00  D7E0               	goto	l981
   733  000B02                     __end_of_Lcd_Write_String:
   734                           	opt callstack 0
   735                           
   736 ;; *************** function _Lcd_Write_Char *****************
   737 ;; Defined at:
   738 ;;		line 81 in file "./lcd.h"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  a               1    wreg     unsigned char 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  a               1    3[COMRAM] unsigned char 
   743 ;;  y               1    2[COMRAM] unsigned char 
   744 ;;  temp            1    1[COMRAM] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   754 ;;      Params:         0       0       0       0       0       0       0       0       0
   755 ;;      Locals:         3       0       0       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0
   757 ;;      Totals:         3       0       0       0       0       0       0       0       0
   758 ;;Total ram usage:        3 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    1
   761 ;; This function calls:
   762 ;;		_Lcd_Port
   763 ;; This function is called by:
   764 ;;		_Lcd_Write_String
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text3
   770  000B02                     __ptext3:
   771                           	opt callstack 0
   772  000B02                     _Lcd_Write_Char:
   773                           	opt callstack 28
   774                           
   775                           ;incstack = 0
   776                           ;Lcd_Write_Char@a stored from wreg
   777  000B02  6E04               	movwf	Lcd_Write_Char@a,c
   778                           
   779                           ;./lcd.h: 81: void Lcd_Write_Char(char a);./lcd.h: 82: {;./lcd.h: 83:    char temp,y;;./
      +                          lcd.h: 84:    temp = a&0x0F;
   780  000B04  5004               	movf	Lcd_Write_Char@a,w,c
   781  000B06  0B0F               	andlw	15
   782  000B08  6E02               	movwf	Lcd_Write_Char@temp,c
   783                           
   784                           ;./lcd.h: 85:    y = a&0xF0;
   785  000B0A  5004               	movf	Lcd_Write_Char@a,w,c
   786  000B0C  0BF0               	andlw	240
   787  000B0E  6E03               	movwf	Lcd_Write_Char@y,c
   788                           
   789                           ;./lcd.h: 86:    PORTDbits.RD2 = 1;
   790  000B10  8483               	bsf	3971,2,c	;volatile
   791                           
   792                           ;./lcd.h: 87:    Lcd_Port(y>>4);
   793  000B12  3803               	swapf	Lcd_Write_Char@y,w,c
   794  000B14  0B0F               	andlw	15
   795  000B16  ECB7  F005         	call	_Lcd_Port
   796                           
   797                           ;./lcd.h: 88:    PORTDbits.RD3 = 1;
   798  000B1A  8683               	bsf	3971,3,c	;volatile
   799                           
   800                           ;./lcd.h: 89:    _delay((unsigned long)((40)*(4000000/4000000.0)));
   801  000B1C  0E0D               	movlw	13
   802  000B1E                     u247:
   803  000B1E  2EE8               	decfsz	wreg,f,c
   804  000B20  D7FE               	bra	u247
   805  000B22  F000               	nop	
   806                           
   807                           ;./lcd.h: 90:    PORTDbits.RD3 = 0;
   808  000B24  9683               	bcf	3971,3,c	;volatile
   809                           
   810                           ;./lcd.h: 91:    Lcd_Port(temp);
   811  000B26  5002               	movf	Lcd_Write_Char@temp,w,c
   812  000B28  ECB7  F005         	call	_Lcd_Port
   813                           
   814                           ;./lcd.h: 92:    PORTDbits.RD3 = 1;
   815  000B2C  8683               	bsf	3971,3,c	;volatile
   816                           
   817                           ;./lcd.h: 93:    _delay((unsigned long)((40)*(4000000/4000000.0)));
   818  000B2E  0E0D               	movlw	13
   819  000B30                     u257:
   820  000B30  2EE8               	decfsz	wreg,f,c
   821  000B32  D7FE               	bra	u257
   822  000B34  F000               	nop	
   823                           
   824                           ;./lcd.h: 94:    PORTDbits.RD3 = 0;
   825  000B36  9683               	bcf	3971,3,c	;volatile
   826  000B38  0012               	return		;funcret
   827  000B3A                     __end_of_Lcd_Write_Char:
   828                           	opt callstack 0
   829                           
   830 ;; *************** function _Lcd_Shift_Right *****************
   831 ;; Defined at:
   832 ;;		line 104 in file "./lcd.h"
   833 ;; Parameters:    Size  Location     Type
   834 ;;		None
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, status,2, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   846 ;;      Params:         0       0       0       0       0       0       0       0       0
   847 ;;      Locals:         0       0       0       0       0       0       0       0       0
   848 ;;      Temps:          0       0       0       0       0       0       0       0       0
   849 ;;      Totals:         0       0       0       0       0       0       0       0       0
   850 ;;Total ram usage:        0 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    2
   853 ;; This function calls:
   854 ;;		_Lcd_Cmd
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text4
   861  000BC8                     __ptext4:
   862                           	opt callstack 0
   863  000BC8                     _Lcd_Shift_Right:
   864                           	opt callstack 28
   865                           
   866                           ;./lcd.h: 106:  Lcd_Cmd(0x01);
   867                           
   868                           ;incstack = 0
   869  000BC8  0E01               	movlw	1
   870  000BCA  ECCD  F005         	call	_Lcd_Cmd
   871                           
   872                           ;./lcd.h: 107:  Lcd_Cmd(0x0C);
   873  000BCE  0E0C               	movlw	12
   874  000BD0  ECCD  F005         	call	_Lcd_Cmd
   875  000BD4  0012               	return		;funcret
   876  000BD6                     __end_of_Lcd_Shift_Right:
   877                           	opt callstack 0
   878                           
   879 ;; *************** function _Lcd_Shift_Left *****************
   880 ;; Defined at:
   881 ;;		line 110 in file "./lcd.h"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   895 ;;      Params:         0       0       0       0       0       0       0       0       0
   896 ;;      Locals:         0       0       0       0       0       0       0       0       0
   897 ;;      Temps:          0       0       0       0       0       0       0       0       0
   898 ;;      Totals:         0       0       0       0       0       0       0       0       0
   899 ;;Total ram usage:        0 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    2
   902 ;; This function calls:
   903 ;;		_Lcd_Cmd
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text5
   910  000BD6                     __ptext5:
   911                           	opt callstack 0
   912  000BD6                     _Lcd_Shift_Left:
   913                           	opt callstack 28
   914                           
   915                           ;./lcd.h: 112:  Lcd_Cmd(0x01);
   916                           
   917                           ;incstack = 0
   918  000BD6  0E01               	movlw	1
   919  000BD8  ECCD  F005         	call	_Lcd_Cmd
   920                           
   921                           ;./lcd.h: 113:  Lcd_Cmd(0x08);
   922  000BDC  0E08               	movlw	8
   923  000BDE  ECCD  F005         	call	_Lcd_Cmd
   924  000BE2  0012               	return		;funcret
   925  000BE4                     __end_of_Lcd_Shift_Left:
   926                           	opt callstack 0
   927                           
   928 ;; *************** function _Lcd_Set_Cursor *****************
   929 ;; Defined at:
   930 ;;		line 41 in file "./lcd.h"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  a               1    wreg     unsigned char 
   933 ;;  b               1    3[COMRAM] unsigned char 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  a               1    4[COMRAM] unsigned char 
   936 ;;  temp            1    7[COMRAM] unsigned char 
   937 ;;  y               1    6[COMRAM] unsigned char 
   938 ;;  z               1    5[COMRAM] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   948 ;;      Params:         1       0       0       0       0       0       0       0       0
   949 ;;      Locals:         4       0       0       0       0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0
   951 ;;      Totals:         5       0       0       0       0       0       0       0       0
   952 ;;Total ram usage:        5 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    2
   955 ;; This function calls:
   956 ;;		_Lcd_Cmd
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text6
   963  000A68                     __ptext6:
   964                           	opt callstack 0
   965  000A68                     _Lcd_Set_Cursor:
   966                           	opt callstack 28
   967                           
   968                           ;incstack = 0
   969                           ;Lcd_Set_Cursor@a stored from wreg
   970  000A68  6E05               	movwf	Lcd_Set_Cursor@a,c
   971                           
   972                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
   973  000A6A  0405               	decf	Lcd_Set_Cursor@a,w,c
   974  000A6C  A4D8               	btfss	status,2,c
   975  000A6E  D010               	goto	l971
   976                           
   977                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
   978  000A70  5004               	movf	Lcd_Set_Cursor@b,w,c
   979  000A72  0F7F               	addlw	127
   980  000A74  6E08               	movwf	Lcd_Set_Cursor@temp,c
   981                           
   982                           ;./lcd.h: 47:   z = temp>>4;
   983  000A76  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   984  000A78  0B0F               	andlw	15
   985  000A7A  6E06               	movwf	Lcd_Set_Cursor@z,c
   986                           
   987                           ;./lcd.h: 48:   y = temp & 0x0F;
   988  000A7C  5008               	movf	Lcd_Set_Cursor@temp,w,c
   989  000A7E  0B0F               	andlw	15
   990  000A80  6E07               	movwf	Lcd_Set_Cursor@y,c
   991                           
   992                           ;./lcd.h: 49:   Lcd_Cmd(z);
   993  000A82  5006               	movf	Lcd_Set_Cursor@z,w,c
   994  000A84  ECCD  F005         	call	_Lcd_Cmd
   995                           
   996                           ;./lcd.h: 50:   Lcd_Cmd(y);
   997  000A88  5007               	movf	Lcd_Set_Cursor@y,w,c
   998  000A8A  ECCD  F005         	call	_Lcd_Cmd
   999                           
  1000                           ;./lcd.h: 51:  }
  1001  000A8E  0012               	return	
  1002  000A90                     l971:
  1003  000A90  0E02               	movlw	2
  1004  000A92  1805               	xorwf	Lcd_Set_Cursor@a,w,c
  1005  000A94  A4D8               	btfss	status,2,c
  1006  000A96  0012               	return	
  1007                           
  1008                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  1009  000A98  5004               	movf	Lcd_Set_Cursor@b,w,c
  1010  000A9A  0FBF               	addlw	191
  1011  000A9C  6E08               	movwf	Lcd_Set_Cursor@temp,c
  1012                           
  1013                           ;./lcd.h: 55:   z = temp>>4;
  1014  000A9E  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  1015  000AA0  0B0F               	andlw	15
  1016  000AA2  6E06               	movwf	Lcd_Set_Cursor@z,c
  1017                           
  1018                           ;./lcd.h: 56:   y = temp & 0x0F;
  1019  000AA4  5008               	movf	Lcd_Set_Cursor@temp,w,c
  1020  000AA6  0B0F               	andlw	15
  1021  000AA8  6E07               	movwf	Lcd_Set_Cursor@y,c
  1022                           
  1023                           ;./lcd.h: 57:   Lcd_Cmd(z);
  1024  000AAA  5006               	movf	Lcd_Set_Cursor@z,w,c
  1025  000AAC  ECCD  F005         	call	_Lcd_Cmd
  1026                           
  1027                           ;./lcd.h: 58:   Lcd_Cmd(y);
  1028  000AB0  5007               	movf	Lcd_Set_Cursor@y,w,c
  1029  000AB2  ECCD  F005         	call	_Lcd_Cmd
  1030  000AB6  0012               	return		;funcret
  1031  000AB8                     __end_of_Lcd_Set_Cursor:
  1032                           	opt callstack 0
  1033                           
  1034 ;; *************** function _Lcd_Init *****************
  1035 ;; Defined at:
  1036 ;;		line 62 in file "./lcd.h"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1050 ;;      Params:         0       0       0       0       0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1052 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1053 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1054 ;;Total ram usage:        1 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    2
  1057 ;; This function calls:
  1058 ;;		_Lcd_Cmd
  1059 ;;		_Lcd_Port
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text7
  1066  0009F6                     __ptext7:
  1067                           	opt callstack 0
  1068  0009F6                     _Lcd_Init:
  1069                           	opt callstack 28
  1070                           
  1071                           ;./lcd.h: 64:   Lcd_Port(0x00);
  1072                           
  1073                           ;incstack = 0
  1074  0009F6  0E00               	movlw	0
  1075  0009F8  ECB7  F005         	call	_Lcd_Port
  1076                           
  1077                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(4000000/4000.0)));
  1078  0009FC  0E1A               	movlw	26
  1079  0009FE  6E04               	movwf	??_Lcd_Init& (0+255),c
  1080  000A00  0EF8               	movlw	248
  1081  000A02                     u267:
  1082  000A02  2EE8               	decfsz	wreg,f,c
  1083  000A04  D7FE               	bra	u267
  1084  000A06  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1085  000A08  D7FC               	bra	u267
  1086  000A0A  D000               	nop2	
  1087                           
  1088                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  1089  000A0C  0E03               	movlw	3
  1090  000A0E  ECCD  F005         	call	_Lcd_Cmd
  1091                           
  1092                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(4000000/4000.0)));
  1093  000A12  0E07               	movlw	7
  1094  000A14  6E04               	movwf	??_Lcd_Init& (0+255),c
  1095  000A16  0E7D               	movlw	125
  1096  000A18                     u277:
  1097  000A18  2EE8               	decfsz	wreg,f,c
  1098  000A1A  D7FE               	bra	u277
  1099  000A1C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1100  000A1E  D7FC               	bra	u277
  1101  000A20  F000               	nop	
  1102                           
  1103                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  1104  000A22  0E03               	movlw	3
  1105  000A24  ECCD  F005         	call	_Lcd_Cmd
  1106                           
  1107                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(4000000/4000.0)));
  1108  000A28  0E0F               	movlw	15
  1109  000A2A  6E04               	movwf	??_Lcd_Init& (0+255),c
  1110  000A2C  0E48               	movlw	72
  1111  000A2E                     u287:
  1112  000A2E  2EE8               	decfsz	wreg,f,c
  1113  000A30  D7FE               	bra	u287
  1114  000A32  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1115  000A34  D7FC               	bra	u287
  1116                           
  1117                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  1118  000A36  0E03               	movlw	3
  1119  000A38  ECCD  F005         	call	_Lcd_Cmd
  1120                           
  1121                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  1122  000A3C  0E02               	movlw	2
  1123  000A3E  ECCD  F005         	call	_Lcd_Cmd
  1124                           
  1125                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  1126  000A42  0E02               	movlw	2
  1127  000A44  ECCD  F005         	call	_Lcd_Cmd
  1128                           
  1129                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  1130  000A48  0E08               	movlw	8
  1131  000A4A  ECCD  F005         	call	_Lcd_Cmd
  1132                           
  1133                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  1134  000A4E  0E00               	movlw	0
  1135  000A50  ECCD  F005         	call	_Lcd_Cmd
  1136                           
  1137                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  1138  000A54  0E0C               	movlw	12
  1139  000A56  ECCD  F005         	call	_Lcd_Cmd
  1140                           
  1141                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  1142  000A5A  0E00               	movlw	0
  1143  000A5C  ECCD  F005         	call	_Lcd_Cmd
  1144                           
  1145                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  1146  000A60  0E06               	movlw	6
  1147  000A62  ECCD  F005         	call	_Lcd_Cmd
  1148  000A66  0012               	return		;funcret
  1149  000A68                     __end_of_Lcd_Init:
  1150                           	opt callstack 0
  1151                           
  1152 ;; *************** function _Lcd_Clear *****************
  1153 ;; Defined at:
  1154 ;;		line 35 in file "./lcd.h"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         0       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		_Lcd_Cmd
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text8
  1183  000BE4                     __ptext8:
  1184                           	opt callstack 0
  1185  000BE4                     _Lcd_Clear:
  1186                           	opt callstack 28
  1187                           
  1188                           ;./lcd.h: 37:  Lcd_Cmd(0);
  1189                           
  1190                           ;incstack = 0
  1191  000BE4  0E00               	movlw	0
  1192  000BE6  ECCD  F005         	call	_Lcd_Cmd
  1193                           
  1194                           ;./lcd.h: 38:  Lcd_Cmd(1);
  1195  000BEA  0E01               	movlw	1
  1196  000BEC  ECCD  F005         	call	_Lcd_Cmd
  1197  000BF0  0012               	return		;funcret
  1198  000BF2                     __end_of_Lcd_Clear:
  1199                           	opt callstack 0
  1200                           
  1201 ;; *************** function _Lcd_Cmd *****************
  1202 ;; Defined at:
  1203 ;;		line 26 in file "./lcd.h"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  a               1    wreg     unsigned char 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  a               1    2[COMRAM] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1217 ;;      Params:         0       0       0       0       0       0       0       0       0
  1218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1219 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1220 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    1
  1224 ;; This function calls:
  1225 ;;		_Lcd_Port
  1226 ;; This function is called by:
  1227 ;;		_Lcd_Clear
  1228 ;;		_Lcd_Set_Cursor
  1229 ;;		_Lcd_Init
  1230 ;;		_Lcd_Shift_Right
  1231 ;;		_Lcd_Shift_Left
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text9
  1236  000B9A                     __ptext9:
  1237                           	opt callstack 0
  1238  000B9A                     _Lcd_Cmd:
  1239                           	opt callstack 28
  1240                           
  1241                           ;incstack = 0
  1242                           ;Lcd_Cmd@a stored from wreg
  1243  000B9A  6E03               	movwf	Lcd_Cmd@a,c
  1244                           
  1245                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  PORTDbits.RD2 = 0;
  1246  000B9C  9483               	bcf	3971,2,c	;volatile
  1247                           
  1248                           ;./lcd.h: 29:  Lcd_Port(a);
  1249  000B9E  5003               	movf	Lcd_Cmd@a,w,c
  1250  000BA0  ECB7  F005         	call	_Lcd_Port
  1251                           
  1252                           ;./lcd.h: 30:  PORTDbits.RD3 = 1;
  1253  000BA4  8683               	bsf	3971,3,c	;volatile
  1254                           
  1255                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(4000000/4000.0)));
  1256  000BA6  0E06               	movlw	6
  1257  000BA8  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  1258  000BAA  0E30               	movlw	48
  1259  000BAC                     u297:
  1260  000BAC  2EE8               	decfsz	wreg,f,c
  1261  000BAE  D7FE               	bra	u297
  1262  000BB0  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1263  000BB2  D7FC               	bra	u297
  1264  000BB4  D000               	nop2	
  1265                           
  1266                           ;./lcd.h: 32:         PORTDbits.RD3 = 0;
  1267  000BB6  9683               	bcf	3971,3,c	;volatile
  1268  000BB8  0012               	return		;funcret
  1269  000BBA                     __end_of_Lcd_Cmd:
  1270                           	opt callstack 0
  1271                           
  1272 ;; *************** function _Lcd_Port *****************
  1273 ;; Defined at:
  1274 ;;		line 4 in file "./lcd.h"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  a               1    wreg     unsigned char 
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  a               1    0[COMRAM] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1288 ;;      Params:         0       0       0       0       0       0       0       0       0
  1289 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1291 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1292 ;;Total ram usage:        1 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_Lcd_Cmd
  1298 ;;		_Lcd_Init
  1299 ;;		_Lcd_Write_Char
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text10
  1304  000B6E                     __ptext10:
  1305                           	opt callstack 0
  1306  000B6E                     _Lcd_Port:
  1307                           	opt callstack 28
  1308                           
  1309                           ;incstack = 0
  1310                           ;Lcd_Port@a stored from wreg
  1311  000B6E  6E01               	movwf	Lcd_Port@a,c
  1312                           
  1313                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  1314  000B70  A001               	btfss	Lcd_Port@a,0,c
  1315  000B72  D002               	goto	l15
  1316                           
  1317                           ;./lcd.h: 7:   PORTDbits.RD4 = 1;
  1318  000B74  8883               	bsf	3971,4,c	;volatile
  1319  000B76  D001               	goto	l755
  1320  000B78                     l15:
  1321                           
  1322                           ;./lcd.h: 9:   PORTDbits.RD4 = 0;
  1323  000B78  9883               	bcf	3971,4,c	;volatile
  1324  000B7A                     l755:
  1325                           
  1326                           ;./lcd.h: 11:  if(a & 2)
  1327  000B7A  A201               	btfss	Lcd_Port@a,1,c
  1328  000B7C  D002               	goto	l17
  1329                           
  1330                           ;./lcd.h: 12:   PORTDbits.RD5 = 1;
  1331  000B7E  8A83               	bsf	3971,5,c	;volatile
  1332  000B80  D001               	goto	l759
  1333  000B82                     l17:
  1334                           
  1335                           ;./lcd.h: 14:   PORTDbits.RD5 = 0;
  1336  000B82  9A83               	bcf	3971,5,c	;volatile
  1337  000B84                     l759:
  1338                           
  1339                           ;./lcd.h: 16:  if(a & 4)
  1340  000B84  A401               	btfss	Lcd_Port@a,2,c
  1341  000B86  D002               	goto	l19
  1342                           
  1343                           ;./lcd.h: 17:   PORTDbits.RD6 = 1;
  1344  000B88  8C83               	bsf	3971,6,c	;volatile
  1345  000B8A  D001               	goto	l763
  1346  000B8C                     l19:
  1347                           
  1348                           ;./lcd.h: 19:   PORTDbits.RD6 = 0;
  1349  000B8C  9C83               	bcf	3971,6,c	;volatile
  1350  000B8E                     l763:
  1351                           
  1352                           ;./lcd.h: 21:  if(a & 8)
  1353  000B8E  A601               	btfss	Lcd_Port@a,3,c
  1354  000B90  D002               	goto	l21
  1355                           
  1356                           ;./lcd.h: 22:   PORTDbits.RD7 = 1;
  1357  000B92  8E83               	bsf	3971,7,c	;volatile
  1358  000B94  0012               	return	
  1359  000B96                     l21:
  1360                           
  1361                           ;./lcd.h: 24:   PORTDbits.RD7 = 0;
  1362  000B96  9E83               	bcf	3971,7,c	;volatile
  1363  000B98  0012               	return		;funcret
  1364  000B9A                     __end_of_Lcd_Port:
  1365                           	opt callstack 0
  1366                           
  1367                           	psect	rparam
  1368  0000                     tosu	equ	0xFFF
  1369                           tosh	equ	0xFFE
  1370                           tosl	equ	0xFFD
  1371                           stkptr	equ	0xFFC
  1372                           pclatu	equ	0xFFB
  1373                           pclath	equ	0xFFA
  1374                           pcl	equ	0xFF9
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           prodh	equ	0xFF4
  1380                           prodl	equ	0xFF3
  1381                           indf0	equ	0xFEF
  1382                           postinc0	equ	0xFEE
  1383                           postdec0	equ	0xFED
  1384                           preinc0	equ	0xFEC
  1385                           plusw0	equ	0xFEB
  1386                           fsr0h	equ	0xFEA
  1387                           fsr0l	equ	0xFE9
  1388                           wreg	equ	0xFE8
  1389                           indf1	equ	0xFE7
  1390                           postinc1	equ	0xFE6
  1391                           postdec1	equ	0xFE5
  1392                           preinc1	equ	0xFE4
  1393                           plusw1	equ	0xFE3
  1394                           fsr1h	equ	0xFE2
  1395                           fsr1l	equ	0xFE1
  1396                           bsr	equ	0xFE0
  1397                           indf2	equ	0xFDF
  1398                           postinc2	equ	0xFDE
  1399                           postdec2	equ	0xFDD
  1400                           preinc2	equ	0xFDC
  1401                           plusw2	equ	0xFDB
  1402                           fsr2h	equ	0xFDA
  1403                           fsr2l	equ	0xFD9
  1404                           status	equ	0xFD8


Data Sizes:
    Strings     76
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 15
		 -> STR_7(CODE[15]), STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[6]), 
		 -> STR_3(CODE[5]), STR_2(CODE[13]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2959
                                             10 COMRAM     6     6      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            _MsDelay
 ---------------------------------------------------------------------------------
 (1) _MsDelay                                              6     4      2     624
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     742
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     953
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _MsDelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     10      10       1       16.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug  9 19:56:03 2019

                       l21 0B96                         l15 0B78                         l17 0B82  
                       l19 0B8C                __CFG_BOR$ON 000000                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                        l763 0B8E                        l755 0B7A  
                      l759 0B84                        l971 0A90                        l981 0AC2  
                      l985 0AE2                        l995 0B4C                        l989 0B44  
             __CFG_CPB$OFF 000000                        u210 0990                        u220 09B8  
                      u204 0882                        u205 087E                        u170 0B5C  
                      u237 0894                        u247 0B1E                        u257 0B30  
             __CFG_CPD$OFF 000000                        u267 0A02                        u277 0A18  
                      u287 0A2E                        u297 0BAC                        wreg 000FE8  
             __CFG_FOSC$HS 000000               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l1001 0B60                       l1013 0872                       l1009 0862  
                     l1019 08A8                       l1073 0998                       l1059 0970  
                     STR_1 081D                       STR_2 0810                       STR_3 0848  
                     STR_4 0842                       STR_5 082A                       STR_6 0837  
                     STR_7 0801                       _LATA 000F89          ?_Lcd_Write_String 0005  
                     _main 084E                       start 0000         ??_Lcd_Write_String 0007  
            __CFG_IESO$OFF 000000            __end_of_Lcd_Cmd 0BBA              __CFG_MCLRE$ON 000000  
             ___param_bank 000000            __end_of_MsDelay 0B6E              __CFG_PLLDIV$1 000000  
           __CFG_CCP2MX$ON 000000                      ?_main 0001              __CFG_USBDIV$1 000000  
  __size_of_Lcd_Set_Cursor 0050                      _TRISA 000F92                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000    __size_of_Lcd_Shift_Left 000E  
                    main@a 000F                      main@b 000D                      tablat 000FF5  
                    status 000FD8             __CFG_ICPRT$OFF 000000             __CFG_PBADEN$ON 000000  
         __end_of_Lcd_Init 0A68           __end_of_Lcd_Port 0B9A            __initialization 0BBA  
             __end_of_main 09F6                     ??_main 000B         __size_of_Lcd_Clear 000E  
            __activetblptr 000001                  ??_Lcd_Cmd 0002    __size_of_Lcd_Write_Char 0038  
                ??_MsDelay 0003             __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000  
 __size_of_Lcd_Shift_Right 000E               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            Lcd_Set_Cursor@a 0005  
          Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0007            Lcd_Set_Cursor@z 0006  
               __accesstop 0060    __end_of__initialization 0BBA          __end_of_Lcd_Clear 0BF2  
            ___rparam_used 000001             __pcstackCOMRAM 0001             _Lcd_Set_Cursor 0A68  
           _Lcd_Shift_Left 0BD6                  ?_Lcd_Init 0001                  ?_Lcd_Port 0001  
__size_of_Lcd_Write_String 004A     __end_of_Lcd_Set_Cursor 0AB8     __end_of_Lcd_Shift_Left 0BE4  
        ??_Lcd_Shift_Right 0004                 ??_Lcd_Init 0004                 ??_Lcd_Port 0001  
          __CFG_VREGEN$OFF 000000             _Lcd_Write_Char 0B02                    _Lcd_Cmd 0B9A  
                  _MsDelay 0B3A                    __Hparam 0000                    __Lparam 0000  
             __psmallconst 0800                    __pcinit 0BBA                    __ramtop 0800  
          ?_Lcd_Set_Cursor 0004                    __ptext0 084E                    __ptext1 0B3A  
                  __ptext2 0AB8                    __ptext3 0B02                    __ptext4 0BC8  
                  __ptext5 0BD6                    __ptext6 0A68                    __ptext7 09F6  
                  __ptext8 0BE4                    __ptext9 0B9A            ?_Lcd_Shift_Left 0001  
   __end_of_Lcd_Write_Char 0B3A       end_of_initialization 0BBA                  Lcd_Port@a 0001  
                _PORTDbits 000F83            ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0005  
        Lcd_Write_String@i 0009                  _Lcd_Clear 0BE4           _Lcd_Write_String 0AB8  
      start_initialization 0BBA          __size_of_Lcd_Init 0072          __size_of_Lcd_Port 002C  
               ?_Lcd_Clear 0001            _Lcd_Shift_Right 0BC8           __CFG_LPT1OSC$OFF 000000  
          Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003                   ?_Lcd_Cmd 0001  
                 ?_MsDelay 0001           ??_Lcd_Set_Cursor 0005           ??_Lcd_Shift_Left 0004  
              __smallconst 0800    __end_of_Lcd_Shift_Right 0BD6                   Lcd_Cmd@a 0003  
              ??_Lcd_Clear 0004           __CFG_WDTPS$32768 000000                   MsDelay@i 0003  
                 MsDelay@j 0005           ??_Lcd_Write_Char 0002                   _Lcd_Init 09F6  
                 _Lcd_Port 0B6E   __end_of_Lcd_Write_String 0B02           __size_of_Lcd_Cmd 0020  
         __size_of_MsDelay 0034                   __Hrparam 0000                   __Lrparam 0000  
             __Lsmallconst 0800                   __ptext10 0B6E              __size_of_main 01A8  
         ?_Lcd_Shift_Right 0001      __CFG_CPUDIV$OSC1_PLL2 000000         Lcd_Write_Char@temp 0002  
       Lcd_Set_Cursor@temp 0008               MsDelay@itime 0001  
